# -*- coding: utf-8 -*-
"""Dossier evaluation

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hur0W0yUGM9L6fIReyLeuDlH0GkBqzxa
"""

import requests
import pandas as pd

def get_fda_approvals(limit=10000):
    print("Fetching FDA approvals from openFDA API...")
    url = f"https://api.fda.gov/drug/drugsfda.json?limit={limit}"
    r = requests.get(url)
    r.raise_for_status()
    data = r.json()['results']

    rows = []
    for entry in data:
        app = entry.get('application_number', '')
        sponsor = entry.get('sponsor_name', '')
        prod = entry.get('products', [{}])[0]
        ingredients = prod.get('active_ingredients', [])
        desc = prod.get('brand_name', '')
        status = prod.get('marketing_status', '')
        summary = f"{entry.get('application_type', '')} {prod.get('dosage_form', '')}" if prod else ''

        rows.append({
            "application_number": app,
            "brand": desc,
            "summary_text": summary,
            "ingredients": "; ".join([i.get('name', '') for i in ingredients]),
            "recommendation": status
        })

    return pd.DataFrame(rows)

# Run it again
fda_df = get_fda_approvals(100)
fda_df.tail()

import pandas as pd

# Replace with your actual filename if different
who_pq_df = pd.read_csv("WHO-pq_list.csv")

# Display the first few rows
who_pq_df.head()
import pdfplumber as pdfplumber

def extract_text_from_pdf(pdf_path):
    text = ""
    with pdfplumber.open(pdf_path) as pdf:
        for page in pdf.pages:
            text += page.extract_text() + "\n"
    return text

# Example
ppb_df = extract_text_from_pdf("PPB-dossier.pdf.pdf")
who_df = extract_text_from_pdf("WHO guideline.pdf")

# Combine if needed
ppbwho_df = ppb_df + "\n" + who_df

# Print preview
print(ppbwho_df[:1000])  # Print first 1000 characters

# ppbwho_df should already contain full guideline paragraphs
from sklearn.feature_extraction.text import TfidfVectorizer

# Treat the combined text as a single document in a list for TfidfVectorizer
guideline_corpus = [ppbwho_df]
vectorizer = TfidfVectorizer(stop_words='english', max_features=5000)
guideline_matrix = vectorizer.fit_transform(guideline_corpus)

# You can optionally display the shape of the resulting matrix
print("Shape of TF-IDF matrix:", guideline_matrix.shape)

# Make sure the column names match the actual column names in who_pq_df
who_pq_df['text'] = who_pq_df['INN, Dosage Form and Strength'] + " " + who_pq_df['Dosage Form'] + " " + who_pq_df['Therapeutic Area']
drug_texts = who_pq_df['text'].fillna("")
drug_matrix = vectorizer.transform(drug_texts)  # use same vectorizer to embed

# Display the first few rows of who_pq_df with the new 'text' column
display(who_pq_df[['INN, Dosage Form and Strength', 'Dosage Form', 'Therapeutic Area', 'text']].head())
# Display the shape of the resulting drug_matrix
print("Shape of drug_matrix:", drug_matrix.shape)

from sklearn.metrics.pairwise import cosine_similarity

similarities = cosine_similarity(drug_matrix, guideline_matrix)
avg_similarity_scores = similarities.mean(axis=1)

who_pq_df['similarity_score'] = avg_similarity_scores

who_pq_df['recommendation'] = ['Recommend' if score > 0.3 else 'Review Further' for score in avg_similarity_scores]

